package com.devgear.codesizer.core.view;

import java.util.HashMap;
import java.util.HashSet;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.event.Action;
import com.vaadin.event.ItemClickEvent;
import com.vaadin.event.ItemClickEvent.ItemClickListener;
import com.vaadin.terminal.ExternalResource;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.Link;
import com.vaadin.ui.Panel;
import com.vaadin.ui.Table;
import com.vaadin.ui.Table.CellStyleGenerator;
import com.vaadin.ui.VerticalLayout;

public class ProjectGridScreen extends CustomComponent {

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private Button button_1;
	@AutoGenerated
	private Table table_1;
	@AutoGenerated
	private Panel panel_1;
	@AutoGenerated
	private VerticalLayout verticalLayout_1;
	@AutoGenerated
	private Label label_1;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	HashMap<Object, String> markedRows = new HashMap<Object, String>();
    HashMap<Object, HashSet<Object>> markedCells = new HashMap<Object, HashSet<Object>>();

    static final Action ACTION_RED = new Action("red");
    static final Action ACTION_BLUE = new Action("blue");
    static final Action ACTION_GREEN = new Action("green");
    static final Action ACTION_NONE = new Action("none");
    static final Action[] ACTIONS = new Action[] { ACTION_RED, ACTION_GREEN,
            ACTION_BLUE, ACTION_NONE };

    /**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public ProjectGridScreen() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		
		final Table table = table_1;
		
        // set a style name, so we can style rows and cells
        table.setStyleName("contacts");

        // size
        table.setWidth("100%");
        table.setPageLength(7);

        // connect data source
        table.setContainerDataSource(ExampleUtil.getPersonContainer());

        // Generate the email-link from firstname & lastname
        table.addGeneratedColumn("Email", new Table.ColumnGenerator() {
            public Component generateCell(Table source, Object itemId,
                    Object columnId) {
                Item item = table.getItem(itemId);
                String fn = (String) item.getItemProperty(
                        ExampleUtil.PERSON_PROPERTY_FIRSTNAME).getValue();
                String ln = (String) item.getItemProperty(
                        ExampleUtil.PERSON_PROPERTY_LASTNAME).getValue();
                String email = fn.toLowerCase() + "." + ln.toLowerCase()
                        + "@example.com";
                // the Link -component:
                Link emailLink = new Link(email, new ExternalResource("mailto:"
                        + email));
                return emailLink;
            }

        });

        // turn on column reordering and collapsing
        table.setColumnReorderingAllowed(true);
        table.setColumnCollapsingAllowed(true);

        // Actions (a.k.a context menu)

        table.addActionHandler(new Action.Handler() {
            public Action[] getActions(Object target, Object sender) {
                return ACTIONS;
            }

            public void handleAction(Action action, Object sender, Object target) {
                markedRows.remove(target);
                if (!ACTION_NONE.equals(action)) {
                    // we're using the cations caption as stylename as well:
                    markedRows.put(target, action.getCaption());
                }
                // this causes the CellStyleGenerator to return new styles,
                // but table can't automatically know, we must tell it:
                table.requestRepaint();
            }

        });

        // style generator
        table.setCellStyleGenerator(new CellStyleGenerator() {
            public String getStyle(Object itemId, Object propertyId) {
                if (propertyId == null) {
                    // no propertyId, styling row
                    return (markedRows.get(itemId));
                } else if (propertyId.equals("Email")) {
                    // style the generated email column
                    return "email";
                } else {
                    HashSet<Object> cells = markedCells.get(itemId);
                    if (cells != null && cells.contains(propertyId)) {
                        // marked cell
                        return "marked";
                    } else {
                        // no style
                        return null;
                    }
                }

            }

        });

        // toggle cell 'marked' styling when double-clicked
        table.addListener(new ItemClickListener() {
            public void itemClick(ItemClickEvent event) {
                if (event.getButton() == ItemClickEvent.BUTTON_RIGHT) {
                    // you can handle left/right/middle -mouseclick
                }

                if (event.isDoubleClick()) {
                    Object itemId = event.getItemId();
                    Object propertyId = event.getPropertyId();
                    HashSet<Object> cells = markedCells.get(itemId);
                    if (cells == null) {
                        cells = new HashSet<Object>();
                        markedCells.put(itemId, cells);
                    }
                    if (cells.contains(propertyId)) {
                        // toggle marking off
                        cells.remove(propertyId);
                    } else {
                        // toggle marking on
                        cells.add(propertyId);
                    }
                    // this causes the CellStyleGenerator to return new styles,
                    // but table can't automatically know, we must tell it:
                    table.requestRepaint();
                }
            }
        });

        // Editing
        // we don't want to update container before pressing 'save':
        table.setWriteThrough(false);
        // edit button
        final Button editButton = button_1;
        editButton.addListener(new Button.ClickListener() {
            public void buttonClick(ClickEvent event) {
                table.setEditable(!table.isEditable());
                editButton.setCaption((table.isEditable() ? "Save" : "Edit"));
            }
        });
        
		
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// panel_1
		panel_1 = buildPanel_1();
		mainLayout
				.addComponent(panel_1, "top:0.0px;bottom:502.0px;left:0.0px;");
		
		// table_1
		table_1 = new Table();
		table_1.setImmediate(false);
		table_1.setWidth("100.0%");
		table_1.setHeight("100.0%");
		mainLayout.addComponent(table_1, "top:58.0px;left:0.0px;");
		
		// button_1
		button_1 = new Button();
		button_1.setCaption("Edit");
		button_1.setImmediate(false);
		button_1.setWidth("-1px");
		button_1.setHeight("-1px");
		mainLayout.addComponent(button_1, "top:10.0px;right:10.0px;");
		
		return mainLayout;
	}

	@AutoGenerated
	private Panel buildPanel_1() {
		// common part: create layout
		panel_1 = new Panel();
		panel_1.setImmediate(false);
		panel_1.setWidth("100.0%");
		panel_1.setHeight("100.0%");
		
		// verticalLayout_1
		verticalLayout_1 = buildVerticalLayout_1();
		panel_1.setContent(verticalLayout_1);
		
		return panel_1;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_1() {
		// common part: create layout
		verticalLayout_1 = new VerticalLayout();
		verticalLayout_1.setImmediate(false);
		verticalLayout_1.setWidth("100.0%");
		verticalLayout_1.setHeight("100.0%");
		verticalLayout_1.setMargin(false);
		
		// label_1
		label_1 = new Label();
		label_1.setStyleName("h1");
		label_1.setCaption("Project Grid");
		label_1.setImmediate(false);
		label_1.setWidth("100.0%");
		label_1.setHeight("100.0%");
		label_1.setValue("<hr/>");
		label_1.setContentMode(3);
		verticalLayout_1.addComponent(label_1);
		verticalLayout_1.setExpandRatio(label_1, 1.0f);
		verticalLayout_1.setComponentAlignment(label_1, new Alignment(33));
		
		return verticalLayout_1;
	}

}
